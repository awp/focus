<?php
/**
 * @file
 * @todo
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function focus_contexts_ctools_plugin_api($module, $api) {
    if ($module == 'context' && $api == 'context') {
        return array('version' => 1);
    }
}

/**
 * Implements hook_context_registry().
 */
function focus_contexts_context_registry() {
    $registry['conditions'] = array(
        'focus_contexts_menu' => array(
            'title' => t('Node Menu Placement'),
            'description' => t('Set context on a node if it exists in one or more menus.'),
            'plugin' => 'focus_contexts_menu_context_condition',
        ),
    );
    
    return $registry;
}

/**
 * Implements hook_context_plugins().
 */
function focus_contexts_context_plugins() {
    $plugins['focus_contexts_menu_context_condition'] = array(
        'handler' => array(
            'path'   => drupal_get_path('module', 'focus_contexts'),
            'file'   => 'focus_contexts.context.inc',
            'class'  => 'focus_contexts_menu_context_condition',
            'parent' => 'context_condition_node',
        ),
    );
       
    return $plugins;
}

/**
 * Implements hook_node_view().
 */
function focus_contexts_node_view($node, $view_mode) {
    if ($view_mode === 'full') {
        $object = menu_get_object();
        $foo = menu_get_item();
        
        _focus_contexts_menu_name_get($node);
        
        if (isset($object->nid) && $object->nid === $node->nid) {
            if ($plugin = context_get_plugin('condition', 'focus_contexts_menu')) {
                $plugin->execute($node, 'view');
            }
        }
    }
}

/**
 * Retrieves menu name from a node.
 * 
 * Helper function.
 * 
 * @param object node
 *   - A Drupal node object.
 */
function _focus_contexts_menu_name_get($node) {
    $query = "
        SELECT menu_name
        FROM {menu_links}
        WHERE link_path = :path
        GROUP BY menu_name
        ORDER BY mlid ASC
        LIMIT 1
    ";
    $placeholders = array(':path' => 'node/' . $node->nid);
    return db_query($query, $placeholders)->fetchField();
}
