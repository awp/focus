<?php
/**
 * @file
 * Installation for FOCUS
 */

require_once('includes/constants.inc');

/**
 * Implements hook_install_tasks()
 */
function focus_install_tasks(&$install_state) {

    // Remove any status messages that might have been set. They are unneeded.
    drupal_get_messages('status', TRUE);

    // Set the maintenance theme to FOCUS Admin.
    _focus_set_theme('simplicity');

    // Increase maximum function nesting level to prevent install errors.
    $max_nesting_level = ini_get('xdebug.max_nesting_level');
    if ($max_nesting_level && $max_nesting_level < 200) {
        ini_set('xdebug.max_nesting_level', 200);
    }

    $tasks['focus_configure_form'] = array(
        'display_name' => st('Choose FOCUS Tools'),
        'type' => 'form',
    );

    $tasks['focus_install_tools'] = array(
        'display_name' => st('Install FOCUS Tools'),
        'type' => 'batch',
    );

    $tasks['focus_choose_themes'] = array(
        'display_name' => st('Choose Site Themes'),
        'type' => 'form',
    );

    $tasks['focus_complete_installation'] = array(
        'display_name' => st('Complete FOCUS Configuration'),
        'type' => 'batch',
    );

    return $tasks;

}

/**
 * Implements hook_install_tasks_alter()
 */
function focus_install_tasks_alter(&$tasks, $install_state) {

    $tasks['install_select_profile']['display'] = FALSE;
    $tasks['install_select_profile']['run']     = INSTALL_TASK_SKIP;

    $tasks['install_select_locale']['display']  = FALSE;
    $tasks['install_select_locale']['run']      = INSTALL_TASK_SKIP;

    // Set welcome screen task.
    $welcome = array(
        'focus_welcome' => array(
            'display'      => TRUE,
            'display_name' => st('Welcome to FOCUS!'),
            'type'         => 'form',
            'run'          => (isset($install_state['parameters']['welcome']))
                ? INSTALL_TASK_SKIP
                : INSTALL_TASK_RUN_IF_REACHED,
        ),
    );

    foreach ($tasks as $task => &$info) {
        if (FALSE !== strpos($task, 'focus_') || empty($info['display_name'])) continue;
        $info['display_name'] = ucwords($info['display_name']);
    }

    $tasks = array_slice($tasks, 0, 0) + $welcome + array_slice($tasks, 2);

}

/**
 * Gets themes, formats list for use in FAPI #options and sorts
 */
function focus_themes_get() {
    $themes = list_themes(TRUE);

    foreach ($themes as $theme => $info) {
        $themes[$theme] = $info->info['name'];
    }

    asort($themes);

    return $themes;
}

/**
 * Task callback
 */
function focus_configure_form() {

    drupal_set_title('Install Tools');

    $tools = toolkit_toolkits_get_all();
    $toolkeys = array_keys($tools);

    $form['#attached']['js'][] = FOCUS_PROFILE_PATH . '/js/dependencies.js';

    // Tool Selection
    $form['tools'] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
    );

    foreach ($tools as $tool => $info) {
        // Skip tools already installed or flagged as hidden.
        if ($info->status || !empty($info->hidden)) {
            continue;
        }

        $default = FALSE;

        if ($info->status || in_array($tool, array('focus_section', 'focus_page', 'focus_sidebar'))) {
            $default = TRUE;
        }

        $requires = array_keys($info->requires);
        $requires = array_intersect($toolkeys, $requires);
        if (FALSE != ($selfrequires = array_search($tool, $requires))) {
            unset($requires[$selfrequires]);
        }

        $form['tools'][$tool] = array(
            '#type' => 'checkbox',
            '#title' => t($info->info['name']),
            '#default_value' => $default,
            '#attributes' => array(
                'data-dependencies' => implode(',', $requires),
            ),
        );
    }

    // Form actions

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => st('Submit Settings'),
        '#weight' => 15,
    );

    return $form;

}

/**
 * Task callback
 */
function focus_choose_themes() {

    drupal_set_title('Choose Site Themes');

    $form['new_theme'] = array(
        '#type' => 'checkbox',
        '#title' => st('Create FOCUS subtheme?'),
    );

    // New Subtheme

    $form['subtheme'] = array(
        '#type' => 'fieldset',
        '#title' => st('Theme Settings'),
        '#tree' => TRUE,
        '#states' => array(
            'visible' => array(
                ':input[name="new_theme"]' => array('checked' => TRUE),
            ),
        ),
    );

    $form['subtheme']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#description' => t('The human-readable name for this theme.'),
        '#default_value' => variable_get('site_name'),
        '#size' => 30,
        '#required' => TRUE,
    );

    $form['subtheme']['machine_name'] = array(
        '#type' => 'machine_name',
        '#default_value' => '',
        '#maxlength' => 30,
        '#machine_name' => array(
            'source' => array('subtheme', 'name'),
        ),
        '#element_validate' => array('focus_theme_name_validate'),
    );

    $form['subtheme']['description'] = array(
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#description' => t('The description that will be shown on the theme listing page.'),
    );

    $form['subtheme']['version'] = array(
        '#type' => 'hidden',
        '#default_value' => '1.0',
    );

    // Theme Selection

    $form['themes'] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
    );

    $form['themes']['default'] = array(
        '#type' => 'select',
        '#title' => st('Default Theme'),
        '#options' => focus_themes_get(),
        '#default_value' => variable_get('theme_default', 'bartik'),
        '#states' => array(
            'visible' => array(
                ':input[name="new_theme"]' => array('checked' => FALSE),
            ),
        ),
    );

    $form['themes']['admin'] = array(
        '#type' => 'select',
        '#title' => st('Admin Theme'),
        '#options' => focus_themes_get(),
        '#default_value' => 'simplicity',
    );

    // Form actions

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => st('Submit Settings'),
        '#weight' => 15,
    );

    return $form;

}

/**
 * Form element validation callback.
 */
function focus_theme_name_validate($element, &$form_state) {
    system_rebuild_theme_data();

    if (!preg_match('/^[a-z][a-z0-9_]*$/', $element['#value'])) {
        form_error($element, t('The theme name is invalid. It may only contain lowercase numbers, letters and underscores and must start with a letter.'));
    }
    else if (focus_theme_exists($element['#value'])) {
        form_error($element, t('A theme with that name already exists. The machine-readable name must be unique.'));
    }
}

/**
 * @todo
 */
function focus_theme_exists($theme) {
  $themes = list_themes();

  return isset($themes[$theme]);
}

/**
 * Form submit callback
 */
function focus_choose_themes_submit(&$form, &$form_state) {

    // Set admin theme
    variable_set('admin_theme', $form_state['values']['themes']['admin']);

    // If we're creating a new theme, do it now.
    if ($form_state['values']['new_theme']) {
        require_once('includes/subtheme.inc');
        focus_subtheme_create($form_state['values']['subtheme']);
    } else {
        // Set default theme.
        variable_set('theme_default', $form_state['values']['themes']['default']);
    }

}

/**
 * Form submit callback
 */
function focus_configure_form_submit(&$form, &$form_state) {
    $tools = array();

    // Set tool install
    foreach ($form_state['values']['tools'] as $tool => $enable) {
        if ($enable) {
            $tools[] = $tool;
        }
    }

    variable_set('focus_tools', $tools);
}

/**
 * Batch callback
 * Identifies FOCUS Tools to be installed and prepares the batch installer
 *
 * @return array $batch
 *  The batch to be implemented
 */
function focus_install_tools() {
    $files = system_rebuild_module_data();

    // First, get all dependencies and add them to our install list.
    $tools = variable_get('focus_tools', array());

    foreach ($tools as $tool) {
        if (empty($files[$tool]->requires)) {
            continue;
        }

        $dependencies = array_keys($files[$tool]->requires);
        $dependencies = array_filter($dependencies, 'module_exists');

        $tools = array_merge($tools, $dependencies);
    }

    // Next, ignore already installed modules and sort by module sort.
    $sorted = array();
    foreach ($tools as $tool) {
        if (empty($files[$tool]->status)) {
            $sorted[$tool] = $files[$tool]->sort;
        }
    }
    arsort($sorted);

    // Finally, add modules that need to be installed to batch operations.
    $operations = array();
    foreach ($sorted as $tool => $sort) {
        if ($info = $files[$tool]) {
            $operations[] = array('_install_module_batch', array($tool, $info->info['name']));
        }
    }

    if (empty($operations)) {
        return _install_profile_modules_finished(array(), array(), array());
    }

    $batch = array(
        'operations' => $operations,
        'title' => st('Installing FOCUS Tools'),
        'error_message' => st('The installation has encountered an error.'),
        'finished' => '_install_profile_modules_finished',
        'file' => FOCUS_PROFILE_PATH . '/includes/batch.inc',
    );

    return $batch;

}

/**
 * Task callback
 */
function focus_complete_installation() {

    $modules = system_rebuild_module_data();

    $disable_themes = array('bartik');
    $disable_blocks = array('help', 'recent', 'form', 'new', 'online');
    $enable_modules = array('entityconnect');

    $operations = array(
        array('_focus_themes_disable', array($disable_themes)),
        array('_focus_blocks_disable', array($disable_blocks)),
    );

    foreach ($enable_modules as $module) {
        if ($info = $modules[$module]) {
            $operations[] = array('_install_module_batch', array($module, $info->info['name']));
        }
    }

    $batch = array(
        'operations' => $operations,
        'title' => st('Wrapping up installation.'),
        'error_message' => st('There was an error completing this installation.'),
        'finished' => 'install_import_locales_remaining',
        'file' => FOCUS_PROFILE_PATH . '/includes/batch.inc',
    );

    return $batch;

}

/**
 * Install Task Callback
 */
function focus_welcome($form, &$form_state, &$install_state) {

    drupal_set_title(st('Welcome to FOCUS!'));

    $message[] = st('FOCUS for Drupal... coming right up!');
    $message[] = st('This distribution will install FOCUS for Drupal - a better way to Drupal');
    $message[] = st('We hope you enjoy your awpsome new website!');

    $form = array();

    $form['welcome_message'] = array(
        '#markup' => '<p>'.(implode('</p><p>', $message)).'</p>',
    );

    $form['actions'] = array(
        '#type' => 'actions',
    );

    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => st("Let's do this!"),
        '#weight' => 50,
    );

    return $form;

}

/**
 * Form submit callback.
 */
function focus_welcome_submit($form, &$form_state) {
    global $install_state;

    $install_state['parameters']['welcome'] = 'complete';
    $install_state['parameters']['locale']  = 'en';
}

/**
 * Force theme setting during installation.
 *
 * Shamelessly stolen from the Commerce Guys's Commerce Kickstart profile.
 * Thank You!
 */
function _focus_set_theme($theme) {
    if ($GLOBALS['theme'] != $theme) {
        unset($GLOBALS['theme']);

        drupal_static_reset();
        $GLOBALS['conf']['maintenance_theme'] = $theme;
        _drupal_maintenance_theme();
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * We use 'system' for the hook because this form is before the full Drupal Bootstrap
 * @see http://drupal.org/node/1153646
 */
function system_form_install_settings_form_alter(&$form, $form_state) {

    if (!empty($form['settings']['mysql'])) {
        $form['settings']['mysql']['database']['#description'] =
            str_replace(' It must exist on your server before FOCUS can be installed.', '', $form['settings']['mysql']['database']['#description']);

        $form['settings']['mysql']['database_new'] = array(
            '#type' => 'checkbox',
            '#title' => st('Create New Database'),
            '#default_value' => TRUE,
            '#description' => st('If the database does not yet exist on this server, one will be created for you, otherwise the existing database will be used.'),
            '#states' => array(
                'visible' => array(
                    ':input[name="driver"]' => array('value' => 'mysql'),
                ),
            ),
            '#weight' => -0.0001,
        );

        // put custom validation ahead of the existing validation
        array_unshift($form['#validate'], 'focus_install_settings_form_validate');

        // put custom submit ahead of the existing submit
        array_unshift($form['actions']['save']['#submit'], 'focus_install_settings_form_submit');
    }

}

/**
 * Form validation callback
 *
 * Creates new database if we can connect with the provided credentials and the option was chosen
 */
function focus_install_settings_form_validate(&$form, &$form_state) {

    if (empty($form_state['values']['mysql']['database_new'])) return;

    $mysql = $form_state['values']['mysql'];

    $database = (empty($mysql['prefix']))
        ? $mysql['database']
        : $mysql['prefix'].'_'.$mysql['database'];

    if ($connect = mysql_connect($mysql['host'], $mysql['username'], $mysql['password'])) {
        mysql_query("CREATE DATABASE IF NOT EXISTS `$database`");
    }

}

/**
 * Form submit callback
 *
 * Removes the database_new key to prevent it from appearing in settings.php
 */
function focus_install_settings_form_submit(&$form, &$form_state) {

    if (isset($form_state['values']['mysql']['database_new'])) {
        unset($form_state['values']['mysql']['database_new']);
    }

    if (isset($form_state['storage']['database']['database_new'])) {
        unset($form_state['storage']['database']['database_new']);
    }

}

/**
 * Implements hook_form_FORM_ID_alter() for install_configure_form().
 *
 * Allows the profile to alter the site configuration form.
 */
function focus_form_install_configure_form_alter(&$form, $form_state) {

    // set default country so we don't have to constantly select it
    $form['server_settings']['site_default_country']['#default_value'] = 'US';

    // by default, we don't want updates
    $form['update_notifications']['update_status_module']['#default_value'] = array(0, 0);

    // expose the clean_url option
    $form['server_settings']['clean_url'] = array(
        '#type' => 'checkbox',
        '#title' => st('Enable clean urls?'),
        '#default_value' => TRUE,
        '#attributes' => array(
            'id' => 'edit-clean-url',
            'class' => array('install'),
        ),
        '#weight' => 10,
    );

    // add custom validator
    $form['#validate'][] = 'focus_install_configure_form_validate';

    // add custom submit
    $form['#submit'][] = 'focus_install_configure_form_submit';

    // optional dandelion script builder
    $form['dandelion_create'] = array(
        '#type' => 'checkbox',
        '#title' => t('Create Dandelion File?'),
        '#description' => t('Dandelion is a ruby gem that can manage your site deployment easily.  !more.', array('!more' => l(t('More Information'), 'http://rubygems.org/gems/dandelion', array('attributes' => array('target' => '_blank'))))),
        '#default_value' => FALSE,
        '#weight' => -50,
    );

    $form['dandelion'] = array(
        '#type' => 'fieldset',
        '#title' => t('FTP Information'),
        '#tree' => TRUE,
        '#weight' => -49,
        '#states' => array(
            'visible' => array(
                'input[name="dandelion_create"]' => array('checked' => TRUE),
            ),
        ),
    );

    $form['dandelion']['scheme'] = array(
        '#type' => 'select',
        '#title' => t('Scheme'),
        '#options' => array(
            'ftp' => t('FTP'),
            'sftp' => t('SFTP'),
        ),
        '#default_value' => 'sftp',
    );

    $form['dandelion']['host'] = array(
        '#type' => 'textfield',
        '#title' => t('Host'),
    );

    $form['dandelion']['username'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
    );

    $form['dandelion']['password'] = array(
        '#type' => 'textfield',
        '#title' => t('Password'),
    );

    $form['dandelion']['path'] = array(
        '#type' => 'textfield',
        '#title' => t('Path'),
    );

    $exclude = array(
        '.gitignore',
        '.htaccess',
        'dandelion.yml',
        'Makefile',
    );

    $form['dandelion']['exclude'] = array(
        '#type' => 'textarea',
        '#title' => t('Files to Exclude'),
        '#description' => t('Put one file per line. Use a path relative to your Drupal root.'),
        '#default_value' => implode("\r\n", $exclude),
    );

}

/**
 * Form validation callback
 */
function focus_install_configure_form_validate($form, &$form_state) {

    // for security, we should never allow an account with the name of 'admin'
    if (isset($form_state['values']['account']['name']) && $form_state['values']['account']['name'] == 'admin') {
        form_set_error('account][name', t('For security, username cannot be: '.$form_state['values']['account']['name']));
    }

}

/**
 * Form submit callback
 */
function focus_install_configure_form_submit($form, &$form_state) {

    if (empty($form_state['values']['dandelion_create'])) return;

    $values = $form_state['values']['dandelion'];
    $file = DRUPAL_ROOT . '/dandelion.yml';
    focus_install_dandelion_write($file, $values);

}

/**
 * Write to dandelion file
 */
function focus_install_dandelion_write($file, $values) {

    $data = '';

    foreach ($values as $key => $value) {
        if ($key == 'exclude') {
            $exclude = explode("\r\n", $value);
            $data .= "$key:\r\n";
            foreach ($exclude as $exfile) {
                $data .= "  - $exfile\r\n";
            }
        } else {
            $data .= "$key: $value\r\n";
        }
    }

    file_put_contents($file, utf8_encode($data));

}

/**
 * Unlock focus content types.
 */
function focus_update_7001(&$sandbox) {
    $query = "UPDATE {node_type} SET locked = :zero WHERE type LIKE :type";
    $placeholders = array(':zero' => 0, ':type' => 'focus_%');
    db_query($query, $placeholders);
}

/**
 * Remove focus_ prefix from content types.
 */
function focus_update_7002(&$sandbox) {
    node_types_rebuild();

    if (!isset($sandbox['node_types'])) {
        $sandbox['node_types'] = node_type_get_types();
        $sandbox['current'] = reset($sandbox['node_types']);
    }

    $orig = $sandbox['current']->type;
    unset($sandbox['node_types'][$orig]);

    if (0 === strpos($sandbox['current']->type, 'focus_')) {
        $sandbox['current']->type = str_replace('focus_', '', $sandbox['current']->type);
        $sandbox['current']->orig_type = $orig;
        $sandbox['current']->old_type = $orig;
        node_type_save($sandbox['current']);

        $query = "UPDATE {node} SET type = :type WHERE type = :orig";
        $placeholders = array(':type' => $sandbox['current']->type, ':orig' => $orig);
        db_query($query, $placeholders);

        watchdog('focus', 'Migrated node type ' . $orig .' to ' . $sandbox['current']->type);
    }

    $sandbox['#finished'] = (empty($sandbox['node_types']));
    $sandbox['current'] = reset($sandbox['node_types']);
}

/**
 * Update entityreference fields to work with new content type machine names.
 */
function focus_update_7003(&$sandbox) {
    $updates = array();

    $query = "
        SELECT field_name, data
        FROM {field_config}
        WHERE type = :type
        AND data LIKE :match
    ";

    $placeholders = array(
        ':type' => 'entityreference',
    );

    foreach (node_type_get_types() as $new => $type) {
        if (0 === strpos($type->orig_type, 'focus_')) {
            $orig = $type->orig_type;
            $new_length  = strlen($new);
            $orig_length = strlen($orig);

            $placeholders[':match'] = '%"' . $orig . '"%';
            $results = db_query($query, $placeholders)->fetchAll();

            foreach (@$results as $i => $data) {
                if (isset($updates[$data->field_name])) {
                    $data = $updates[$data->field_name];
                }
                else {
                    $updates[$data->field_name] = $data;
                }

                preg_match_all('#\:[\d]+\:\"' . $orig . '\";#i', $data->data, $matches);

                foreach ($matches[0] as $k => $match) {
                    $replace = str_replace(array($orig_length, $orig), array($new_length, $new), $match);
                    $updates[$data->field_name]->data = str_replace($match, $replace, $data->data);
                }
            }
        }
    }

    foreach ($updates as $update) {
        $query = "
            UPDATE {field_config}
            SET data = :updated
            WHERE field_name = :name
        ";
        $placeholders = array(
            ':updated' => $update->data,
            ':name'    => $update->field_name,
        );
        db_query($query, $placeholders);
    }

    $sandbox['#finished'] = TRUE;

}

/**
 * Update views to work with new content type machine names.
 */
function focus_update_7004(&$sandbox) {
    $updates = array();

    $query = "
        SELECT vid, id, display_options
        FROM {views_display}
        WHERE display_options LIKE :options
    ";

    foreach (node_type_get_types() as $new => $type) {
        if (0 === strpos($type->orig_type, 'focus_')) {
            $orig = $type->orig_type;
            $new_length  = strlen($new);
            $orig_length = strlen($orig);

            $placeholders = array(':options' => '%"' . $orig . '"%');
            $displays = db_query($query, $placeholders)->fetchAll();

            foreach (@$displays as $i => $data) {
                if (isset($updates[$data->vid . '-' . $data->id])) {
                    $data = $updates[$data->vid . '-' . $data->id];
                }
                else {
                    $updates[$data->vid . '-' . $data->id] = $data;
                }

                preg_match_all('#\:[\d]+\:\"' . $orig . '\";#i', $data->display_options, $matches);

                foreach ($matches[0] as $k => $match) {
                    $replace = str_replace(array($orig_length, $orig), array($new_length, $new), $match);
                    $updates[$data->vid . '-' . $data->id]->display_options = str_replace($match, $replace, $data->display_options);
                }
            }
        }
    }

    foreach ($updates as $update) {
        $query = "
            UPDATE {views_display}
            SET display_options = :updated
            WHERE vid = :vid
            AND id = :id
        ";
        $placeholders = array(
            ':updated' => $update->display_options,
            ':vid'     => $update->vid,
            ':id'      => $update->id,
        );
        db_query($query, $placeholders);
    }

    $sandbox['#finished'] = TRUE;

}

/**
 * Update contexts to work with new content type machine names.
 */
function focus_update_7005(&$sandbox) {
    if (!isset($sandbox['contexts'])) {
        $sandbox['contexts'] = context_load();
        $sandbox['current'] = reset($sandbox['contexts']);
    }

    $updated = FALSE;

    $name = $sandbox['current']->name;
    unset($sandbox['contexts'][$name]);

    if (isset($sandbox['current']->conditions['node']['values'])) {
        foreach ($sandbox['current']->conditions['node']['values'] as $key => $value) {
            if (0 === strpos($value, 'focus_')) {
                $new = str_replace('focus_', '', $value);
                $sandbox['current']->conditions['node']['values'][$new] = $new;
                unset($sandbox['current']->conditions['node']['values'][$key]);
                $updated = TRUE;
            }
        }

        if ($updated) {
            context_save($sandbox['current']);
        }
    }

    $sandbox['#finished'] = (empty($sandbox['contexts']));
    $sandbox['current'] = reset($sandbox['contexts']);
}

/**
 * Update variables to work with new content type machine names.
 */
function focus_update_7006(&$sandbox) {
    $query1 = "SELECT * FROM {variable} WHERE name LIKE :orig";
    $query2 = "SELECT * FROM {variable} WHERE value LIKE :match";
    $updates = array();

    foreach (node_type_get_types() as $new => $type) {
        if (0 === strpos($type->orig_type, 'focus_')) {
            $orig = $type->orig_type;
            $new_length  = strlen($new);
            $orig_length = strlen($orig);

            // First query and replace all variable names.
            $placeholders = array(':orig' => '%' . $orig . '%');
            $results = db_query($query1, $placeholders)->fetchAll();

            foreach (@$results as $variable) {
                $new_name = str_replace($orig, $new, $variable->name);
                $value = variable_get($variable->name);
                variable_del($variable->name);
                variable_set($new_name, $value);
            }

            // Then query and replace all variable values.
            $placeholders = array(':match' => '%"' . $orig . '"%');
            $results = db_query($query2, $placeholders)->fetchAll();

            foreach (@$results as $i => $data) {
                if (isset($updates[$data->name])) {
                    $data = $updates[$data->name];
                }
                else {
                    $updates[$data->name] = $data;
                }

                preg_match_all('#\:[\d]+\:\"' . $orig . '\";#i', $data->value, $matches);

                foreach ($matches[0] as $k => $match) {
                    $replace = str_replace(array($orig_length, $orig), array($new_length, $new), $match);
                    $updates[$data->name]->value = str_replace($match, $replace, $data->value);
                }
            }
        }
    }

    foreach ($updates as $update) {
        $query = "
            UPDATE {variable}
            SET value = :updated
            WHERE name = :name
        ";
        $placeholders = array(
            ':updated' => $update->value,
            ':name'    => $update->name,
        );
        db_query($query, $placeholders);
    }

    $sandbox['#finished'] = TRUE;

}
